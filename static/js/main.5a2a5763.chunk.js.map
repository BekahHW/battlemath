{"version":3,"sources":["AppReducer.js","App.js","serviceWorker.js","index.js"],"names":["randomNumberGenerator","min","arguments","length","undefined","max","Math","floor","random","types","SET_ANSWER","ADD_ENEMY","REMOVE_ENEMY","CHECK_ANSWER","NEW_PROBLEM","SET_MODE","reducer","state","action","type","RESTART","restartState","Object","C_Users_jesse_battlemath_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","initialState","mode","operator","answer","payload","numOfEnemies","newState","won","parseInt","expected","eval","concat","val1","val2","stateWithEnemies","operatorsByMode","Error","addition","subtraction","multiplication","division","styles","StyleSheet","create","root","flex","alignItems","position","top","bottom","left","right","paddingVertical","title","fontSize","fontFamily","picker","height","width","battlefield","flexDirection","paddingHorizontal","container","justifyContent","character","hero","backgroundColor","enemy","mathContainer","mathRow","paddingBottom","mathText","paddingRight","input","borderColor","borderWidth","themes","App","_useReducer","useReducer","_useReducer2","slicedToArray","_useReducer2$","dispatch","handleAnswerChange","useCallback","value","handleModePicker","handleRestart","handleSubmit","activeTheme","useEffect","react_default","a","createElement","View","style","Text","Picker","selectedValue","onValueChange","Item","label","toConsumableArray","Array","map","_","i","key","Button","onPress","color","accessibilityLabel","TextInput","onChangeText","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a2a5763.chunk.js","sourcesContent":["export function randomNumberGenerator(min = 0, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nexport const types = {\r\n  SET_ANSWER: 0,\r\n  ADD_ENEMY: 1,\r\n  REMOVE_ENEMY: 2,\r\n  CHECK_ANSWER: 3,\r\n  NEW_PROBLEM: 4,\r\n  SET_MODE: 5\r\n}\r\n\r\nexport function reducer(state, action) {\r\n  switch (action.type) {\r\n    case types.RESTART:\r\n      const restartState = { ...initialState }\r\n      restartState.mode = state.mode\r\n      restartState.operator = state.operator\r\n\r\n      return reducer(restartState, { type: types.NEW_PROBLEM })\r\n\r\n    case types.SET_ANSWER:\r\n      return {\r\n        ...state,\r\n        answer: action.payload\r\n      }\r\n\r\n    case types.ADD_ENEMY:\r\n      if (state.numOfEnemies < 6) {\r\n        return {\r\n          ...state,\r\n          numOfEnemies: state.numOfEnemies + 1\r\n        }\r\n      }\r\n      break\r\n\r\n    case types.REMOVE_ENEMY:\r\n      const newState = { ...state }\r\n      newState.numOfEnemies--\r\n\r\n      if (newState.numOfEnemies === 0) {\r\n        newState.won = true\r\n      }\r\n\r\n      return newState\r\n\r\n    case types.CHECK_ANSWER:\r\n      const answer = parseInt(state.answer, 10)\r\n      // example: eval('2 + 4'); Note: eval is safe here because we control the input\r\n      // eslint-disable-next-line no-eval\r\n      const expected = eval(`${state.val1} ${state.operator} ${state.val2}`)\r\n\r\n      // Update enemies & won\r\n      const stateWithEnemies =\r\n        answer === expected\r\n          ? reducer(state, { type: types.REMOVE_ENEMY })\r\n          : reducer(state, { type: types.ADD_ENEMY })\r\n\r\n      // Update problem\r\n      return reducer(stateWithEnemies, { type: types.NEW_PROBLEM })\r\n\r\n    case types.NEW_PROBLEM:\r\n      return {\r\n        ...state,\r\n        val1: randomNumberGenerator(1, 9),\r\n        val2: randomNumberGenerator(1, 9)\r\n      }\r\n\r\n    case types.SET_MODE:\r\n      const mode = action.payload\r\n      return {\r\n        ...state,\r\n        mode,\r\n        operator: operatorsByMode[mode]\r\n      }\r\n\r\n    default:\r\n      throw new Error(`Invalid action ${action.type}`)\r\n  }\r\n\r\n  return state\r\n}\r\n\r\nexport const initialState = {\r\n  answer: '',\r\n  numOfEnemies: 3,\r\n  val1: 0,\r\n  val2: 0,\r\n  won: false,\r\n  operator: '+',\r\n  mode: 'addition'\r\n}\r\n\r\nconst operatorsByMode = {\r\n  addition: '+',\r\n  subtraction: '-',\r\n  multiplication: '*',\r\n  division: '/'\r\n}\r\n","import React, { useReducer, useCallback, useEffect } from 'react'\r\nimport { StyleSheet, Text, View, TextInput, Button, Picker } from 'react-native'\r\nimport { reducer, initialState, types } from './AppReducer'\r\n\r\nimport './App.css'\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    position: 'absolute',\r\n    top: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n    paddingVertical: 16\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n    fontFamily: `\"Comic Sans MS\", cursive, sans-serif`\r\n  },\r\n  picker: { height: 60, width: 150 },\r\n  battlefield: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    width: '100%',\r\n    paddingHorizontal: 16\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'space-evenly'\r\n  },\r\n  character: {\r\n    width: 80,\r\n    height: 80\r\n  },\r\n  hero: {\r\n    backgroundColor: 'blue'\r\n  },\r\n  enemy: {\r\n    backgroundColor: 'red'\r\n  },\r\n  mathContainer: {\r\n    paddingVertical: 16\r\n  },\r\n  mathRow: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    paddingBottom: 8\r\n  },\r\n  mathText: {\r\n    fontSize: 28,\r\n    paddingRight: 8\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: 60,\r\n    borderColor: 'gray',\r\n    borderWidth: 1\r\n  }\r\n})\r\n\r\nconst themes = {\r\n  addition: {\r\n    backgroundColor: 'green'\r\n  },\r\n  subtraction: {\r\n    backgroundColor: 'pink'\r\n  },\r\n  multiplication: {\r\n    backgroundColor: 'yellow'\r\n  },\r\n  division: {\r\n    backgroundColor: 'orange'\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [\r\n    { answer, numOfEnemies, val1, val2, won, operator, mode },\r\n    dispatch\r\n  ] = useReducer(reducer, initialState)\r\n\r\n  // useCallback helps prevent rerendering via memoization\r\n  const handleAnswerChange = useCallback(\r\n    value => {\r\n      dispatch({ type: types.SET_ANSWER, payload: value })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const handleModePicker = useCallback(\r\n    mode => {\r\n      dispatch({\r\n        type: types.SET_MODE,\r\n        payload: mode\r\n      })\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const handleRestart = useCallback(() => {\r\n    dispatch({ type: types.RESTART })\r\n  }, [dispatch])\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    dispatch({ type: types.CHECK_ANSWER })\r\n  }, [dispatch])\r\n\r\n  const activeTheme = themes[mode]\r\n\r\n  // Equivalent of componentDidMount\r\n  useEffect(() => {\r\n    dispatch({ type: types.NEW_PROBLEM })\r\n  }, [])\r\n\r\n  return (\r\n    <View\r\n      style={[styles.root, { backgroundColor: activeTheme.backgroundColor }]}\r\n    >\r\n      <Text style={styles.title}>Battle Math</Text>\r\n      <Picker\r\n        selectedValue={mode}\r\n        style={styles.picker}\r\n        onValueChange={handleModePicker}\r\n      >\r\n        <Picker.Item label=\"Additon(+)\" value=\"addition\" />\r\n        <Picker.Item label=\"Subtraction(-)\" value=\"subtraction\" />\r\n        <Picker.Item label=\"Multiplication(*)\" value=\"multiplication\" />\r\n        <Picker.Item label=\"Division(/)\" value=\"division\" />\r\n      </Picker>\r\n      <View style={styles.battlefield}>\r\n        <View style={styles.container}>\r\n          <View style={[styles.character, styles.hero]} />\r\n        </View>\r\n        <View style={styles.container}>\r\n          {[...Array(numOfEnemies)].map((_, i) => (\r\n            <View key={i} style={[styles.character, styles.enemy]} />\r\n          ))}\r\n        </View>\r\n      </View>\r\n      {won ? (\r\n        <View>\r\n          <Text>Victory!</Text>\r\n          <Button\r\n            onPress={handleRestart}\r\n            title=\"Restart\"\r\n            color=\"#0080ff\"\r\n            accessibilityLabel=\"Click this button to play again.\"\r\n          />\r\n        </View>\r\n      ) : (\r\n        <View style={styles.mathContainer}>\r\n          <View style={styles.mathRow}>\r\n            <Text style={styles.mathText}>\r\n              {val1} {operator} {val2} =\r\n            </Text>\r\n            <TextInput\r\n              style={styles.input}\r\n              onChangeText={handleAnswerChange}\r\n              value={answer}\r\n            />\r\n          </View>\r\n          <Button\r\n            onPress={handleSubmit}\r\n            title=\"Submit\"\r\n            color=\"#841584\"\r\n            accessibilityLabel=\"Learn more about this purple button\"\r\n          />\r\n        </View>\r\n      )}\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}