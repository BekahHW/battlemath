{"version":3,"sources":["AppReducer.js","App.js","serviceWorker.js","index.js"],"names":["randomNumberGenerator","min","arguments","length","undefined","max","Math","floor","random","types","SET_ANSWER","ADD_ENEMY","REMOVE_ENEMY","CHECK_ANSWER","NEW_PROBLEM","SET_MODE","reducer","state","action","type","RESTART","restartState","Object","_Users_jesseweigel_Projects_battlemath_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","initialState","mode","operator","answer","payload","numOfEnemies","newState","won","parseInt","expected","eval","concat","val1","val2","stateWithEnemies","x","y","operatorsByMode","Error","addition","subtraction","multiplication","division","styles","StyleSheet","create","root","flex","alignItems","position","top","bottom","left","right","paddingVertical","title","fontSize","fontFamily","picker","height","width","battlefield","flexDirection","paddingHorizontal","container","justifyContent","character","hero","backgroundColor","enemy","mathContainer","mathRow","paddingBottom","mathText","input","borderColor","borderWidth","marginLeft","button","buttonText","color","themes","App","_useReducer","useReducer","_useReducer2","slicedToArray","_useReducer2$","dispatch","submitInputRef","useRef","handleAnswerChange","useCallback","value","handleModePicker","handleRestart","handleSubmit","current","focus","activeTheme","useEffect","react_default","a","createElement","View","style","Text","Picker","selectedValue","onValueChange","Item","label","nativeID","toConsumableArray","Array","map","_","i","className","key","Button","onPress","accessibilityLabel","TextInput","onChangeText","onSubmitEditing","ref","TouchableOpacity","testID","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d7b8243.chunk.js","sourcesContent":["export function randomNumberGenerator(min = 0, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport const types = {\n  SET_ANSWER: 0,\n  ADD_ENEMY: 1,\n  REMOVE_ENEMY: 2,\n  CHECK_ANSWER: 3,\n  NEW_PROBLEM: 4,\n  SET_MODE: 5\n}\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case types.RESTART: {\n      const restartState = { ...initialState }\n      restartState.mode = state.mode\n      restartState.operator = state.operator\n\n      return reducer(restartState, { type: types.NEW_PROBLEM })\n    }\n\n    case types.SET_ANSWER: {\n      return {\n        ...state,\n        answer: action.payload\n      }\n    }\n\n    case types.ADD_ENEMY: {\n      if (state.numOfEnemies < 6) {\n        return {\n          ...state,\n          numOfEnemies: state.numOfEnemies + 1\n        }\n      }\n      break\n    }\n\n    case types.REMOVE_ENEMY: {\n      const newState = { ...state }\n      newState.numOfEnemies--\n\n      if (newState.numOfEnemies === 0) {\n        newState.won = true\n      }\n\n      return newState\n    }\n\n    case types.CHECK_ANSWER: {\n      const answer = parseInt(state.answer, 10)\n      // example: eval('2 + 4'); Note: eval is safe here because we control the input\n      // eslint-disable-next-line no-eval\n      const expected = eval(`${state.val1} ${state.operator} ${state.val2}`)\n\n      // Update enemies & won\n      const stateWithEnemies =\n        answer === expected\n          ? reducer(state, { type: types.REMOVE_ENEMY })\n          : reducer(state, { type: types.ADD_ENEMY })\n\n      // Update problem\n      return reducer(stateWithEnemies, { type: types.NEW_PROBLEM })\n    }\n\n    case types.NEW_PROBLEM: {\n      let x\n      let y\n\n      switch (state.mode) {\n        case 'division': {\n          x = randomNumberGenerator(1, 9)\n          y = randomNumberGenerator(1, Math.floor(9 / x)) // keeps x *= y below 10\n          x *= y // divide by `y` to get back `x`\n          break\n        }\n\n        case 'subtraction': {\n          x = randomNumberGenerator(1, 9)\n          y = randomNumberGenerator(1, x)\n          break\n        }\n\n        default:\n          x = randomNumberGenerator(1, 9)\n          y = randomNumberGenerator(1, 9)\n      }\n\n      // if problem is the same, retry\n      if (x === state.val1 && y === state.val2) {\n        return reducer(state, { type: types.NEW_PROBLEM })\n      }\n\n      return {\n        ...state,\n        val1: x,\n        val2: y,\n        answer: ''\n      }\n    }\n\n    case types.SET_MODE: {\n      const mode = action.payload\n      return reducer(\n        {\n          ...state,\n          mode,\n          operator: operatorsByMode[mode]\n        },\n        { type: types.NEW_PROBLEM }\n      )\n    }\n\n    default:\n      throw new Error(`Invalid action ${action.type}`)\n  }\n\n  return state\n}\n\nexport const initialState = {\n  answer: '',\n  numOfEnemies: 3,\n  val1: 0,\n  val2: 0,\n  won: false,\n  operator: '+',\n  mode: 'addition'\n}\n\nconst operatorsByMode = {\n  addition: '+',\n  subtraction: '-',\n  multiplication: '*',\n  division: '/'\n}\n","import React, { useReducer, useCallback, useEffect, useRef } from 'react'\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  Button,\n  TouchableOpacity,\n  Picker\n} from 'react-native'\nimport { reducer, initialState, types } from './AppReducer'\n\nimport './App.css'\n\nfunction App() {\n  const [\n    { answer, numOfEnemies, val1, val2, won, operator, mode },\n    dispatch\n  ] = useReducer(reducer, initialState)\n\n  let submitInputRef = useRef()\n\n  // useCallback helps prevent re-rendering via memoization\n  const handleAnswerChange = useCallback(\n    value => {\n      dispatch({ type: types.SET_ANSWER, payload: value })\n    },\n    [dispatch]\n  )\n\n  const handleModePicker = useCallback(\n    mode => {\n      dispatch({\n        type: types.SET_MODE,\n        payload: mode\n      })\n    },\n    [dispatch]\n  )\n\n  const handleRestart = useCallback(() => {\n    dispatch({ type: types.RESTART })\n  }, [dispatch])\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: types.CHECK_ANSWER })\n    if (submitInputRef.current) submitInputRef.current.focus()\n  }, [dispatch])\n\n  const activeTheme = themes[mode]\n\n  // Equivalent of componentDidMount\n  useEffect(() => {\n    dispatch({ type: types.NEW_PROBLEM })\n    if (submitInputRef.current) submitInputRef.current.focus()\n  }, [])\n\n  return (\n    <View\n      style={[styles.root, { backgroundColor: activeTheme.backgroundColor }]}\n    >\n      <Text style={styles.title}>Battle Math</Text>\n      <Picker\n        selectedValue={mode}\n        style={styles.picker}\n        onValueChange={handleModePicker}\n      >\n        <Picker.Item label=\"Addition(+)\" value=\"addition\" />\n        <Picker.Item label=\"Subtraction(-)\" value=\"subtraction\" />\n        <Picker.Item label=\"Multiplication(*)\" value=\"multiplication\" />\n        <Picker.Item label=\"Division(/)\" value=\"division\" />\n      </Picker>\n      <View style={styles.battlefield}>\n        <View style={styles.container}>\n          <View nativeID=\"hero\" style={[styles.character, styles.hero]} />\n        </View>\n        <View style={styles.container}>\n          {[...Array(numOfEnemies)].map((_, i) => (\n            <View\n              className=\"enemy\"\n              key={i}\n              style={[styles.character, styles.enemy]}\n            />\n          ))}\n        </View>\n      </View>\n      {won ? (\n        <View>\n          <Text>Victory!</Text>\n          <Button\n            onPress={handleRestart}\n            title=\"Restart\"\n            color=\"#0080ff\"\n            accessibilityLabel=\"Click this button to play again.\"\n          />\n        </View>\n      ) : (\n        <View style={styles.mathContainer}>\n          <View style={styles.mathRow}>\n            <Text nativeID=\"val1\" style={styles.mathText}>\n              {val1}\n            </Text>\n            <Text nativeID=\"operator\" style={styles.mathText}>\n              {operator}\n            </Text>\n            <Text nativeID=\"val2\" style={styles.mathText}>\n              {val2}\n            </Text>\n            <Text style={styles.mathText}>=</Text>\n            <TextInput\n              nativeID=\"answer-input\"\n              style={styles.input}\n              onChangeText={handleAnswerChange}\n              onSubmitEditing={handleSubmit}\n              value={answer}\n              ref={submitInputRef}\n            />\n          </View>\n          <TouchableOpacity\n            style={styles.button}\n            testID=\"submit\"\n            title=\"Submit\"\n            onPress={handleSubmit}\n            accessibilityLabel=\"Learn more about this purple button\"\n          >\n            <Text style={styles.buttonText}>Submit</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: 'center',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    paddingVertical: 16\n  },\n  title: {\n    fontSize: 32,\n    fontFamily: `\"Comic Sans MS\", cursive, sans-serif`\n  },\n  picker: { height: 60, width: 150 },\n  battlefield: {\n    flex: 1,\n    flexDirection: 'row',\n    width: '100%',\n    paddingHorizontal: 16\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'space-evenly'\n  },\n  character: {\n    width: 40,\n    height: 40\n  },\n  hero: {\n    backgroundColor: 'blue'\n  },\n  enemy: {\n    backgroundColor: 'red'\n  },\n  mathContainer: {\n    paddingVertical: 16\n  },\n  mathRow: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    paddingBottom: 16\n  },\n  mathText: {\n    fontSize: 40\n  },\n  input: {\n    height: 60,\n    width: 60,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginLeft: 8\n  },\n  button: {\n    height: 60,\n    width: 200,\n    backgroundColor: '#841584',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 40\n  }\n})\n\nconst themes = {\n  addition: {\n    backgroundColor: 'green'\n  },\n  subtraction: {\n    backgroundColor: 'pink'\n  },\n  multiplication: {\n    backgroundColor: 'yellow'\n  },\n  division: {\n    backgroundColor: 'orange'\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}